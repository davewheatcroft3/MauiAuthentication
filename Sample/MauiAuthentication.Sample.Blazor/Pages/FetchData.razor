@page "/fetchdata"

@using Mau.Authentication.Blazor
@using MauiAuthentication.Sample.Blazor.Data
@using Microsoft.AspNetCore.Components.Authorization
@inject WeatherApiClient ForecastService
@inject MauiBlazorAuthenticationStateProvider AuthenticationStateProvider

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

<AuthorizeView>
    <Authorized>
        @if (forecasts == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Temp. (C)</th>
                        <th>Temp. (F)</th>
                        <th>Summary</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var forecast in forecasts)
                    {
                        <tr>
                            <td>@forecast.Date.ToShortDateString()</td>
                            <td>@forecast.TemperatureC</td>
                            <td>@forecast.TemperatureF</td>
                            <td>@forecast.Summary</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </Authorized>
    <NotAuthorized>
        <p>You must be authorized to view this data. Click below to sign in.</p>
        <button @onclick="LoginAsync">
            Sign In
        </button>
    </NotAuthorized>
</AuthorizeView>

@code {
    private WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (state.User.Identity.IsAuthenticated)
        {
            forecasts = await ForecastService.GetForecastAsync();
        }

        await base.OnInitializedAsync();
    }

    private async Task LoginAsync()
    {
        await AuthenticationStateProvider.LoginAsync();
    }
}
